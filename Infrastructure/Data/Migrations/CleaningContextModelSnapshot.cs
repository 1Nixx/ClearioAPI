// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(CleaningContext))]
    partial class CleaningContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Core.Entities.CleaningObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactTelephone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ObjectLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectSquare")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsualTeamSize")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CleaningObjects", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CleanTeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CleanerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CleanerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndWorking")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFinishedWorking")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStartingWorking")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartWorking")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("CleanTeamMember", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CleaningObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CleaningObjectId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CleanTeamMember", b =>
                {
                    b.HasOne("Core.Entities.Order", null)
                        .WithMany("Cleaners")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Core.Entities.Order", b =>
                {
                    b.HasOne("Core.Entities.CleaningObject", "CleaningObject")
                        .WithMany()
                        .HasForeignKey("CleaningObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CleaningObject");
                });

            modelBuilder.Entity("Core.Entities.Order", b =>
                {
                    b.Navigation("Cleaners");
                });
#pragma warning restore 612, 618
        }
    }
}
